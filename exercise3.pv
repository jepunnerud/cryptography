type key.
type message.

fun encrypt(message, key): message.
fun decrypt(message, key): message.
equation forall x:message, y:key; decrypt(encrypt(x, y), y) = x.
equation forall x:message, y:key; encrypt(decrypt(x, y), y) = x.

fun func_f(message, message): message.
fun func_g(message): message.
fun func_d(message): message.
equation forall x:message; func_d(x) = x.

free k: key [private].
free h: key [private].
free j: key [private].

free a, b, c, d: channel.

free m: message [private].
free p: message [private].

query attacker(m).
query attacker(p).

let A = 
    in(a, enc_m: message);
    out(c, encrypt(m, k)).

let B = 
    in(b, enc_p: message);
    out(c, encrypt(p, h)).

let C = 
    in(c, enc_m: message);
    in(c, enc_p: message);
    let combined = func_f(enc_m, enc_p) in
    out(d, combined).

let D = 
    in(d, combined: message);
    let m_dec = func_d(combined) in
    out(a, encrypt(m_dec, j));
    out(b, func_g(p)).

process
    !A | !B | !C | !D
