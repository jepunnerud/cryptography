type key.
type message.

fun encrypt(message, key): message.
fun decrypt(message, key): message.
equation forall x:message, y:key; decrypt(encrypt(x, y), y) = x.
equation forall x:message, y:key; encrypt(decrypt(x, y), y) = x.

fun f(message, message): message.
fun g(message): message.
fun d(message): message.
equation forall x:message; d(x) = x.

free k, h, j: key [private].
free c: channel.
free m, p: message [private].

query attacker(m).
query attacker(p).

let A = 
    in(c, da_m: message);
    let ac = encrypt(m, k) in
    out(c, ac).

let B = 
    in(c, db_p: message);
    let bc = encrypt(p, h) in
    out(c, bc).

let C = 
    in(c, ac_m: message);
    in(c, bc_p: message);
    let cd_mp = f(m, p) in
    out(c, cd_mp).

let D = 
    in(c, cd_mp: message);
    let da_m = encrypt(d(m), j) in
    out(c, da_m);
    let db_p = g(p) in
    out(c, db_p).

process
    !A | !B | !C | !D
