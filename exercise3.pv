type key.
type message.

fun encrypt(message, key): message.
fun decrypt(message, key): message.
equation forall x:message, y:key; decrypt(encrypt(x, y), y) = x.
equation forall x:message, y:key; encrypt(decrypt(x, y), y) = x.

fun f(message, message): message.
fun g(message): message.
fun d(message): message.
equation forall x:message; d(x) = x.

free k, h, j: key [private].
free ac, bc, cd, da, db: channel.
free m, p: message [private].

query attacker(m).
query attacker(p).

let A = 
    in(da, enc_m: message);
    out(ac, encrypt(m, k)).

let B = 
    in(db, enc_p: message);
    out(bc, encrypt(p, h)).

let C = 
    in(ac, enc_m: message);
    in(bc, enc_p: message);
    let combined = f(m, p) in
    out(cd, combined).

let D = 
    in(cd, combined: message);
    let new_m = d(m) in
    out(da, encrypt(new_m, j));
    out(db, g(p)).

process
    !A | !B | !C | !D
